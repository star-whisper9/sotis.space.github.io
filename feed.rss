<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>以太之海</title>
        <link>https://blog.vuejs.org</link>
        <description>A VitePress site</description>
        <lastBuildDate>Thu, 12 Sep 2024 03:12:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-CN</language>
        <image>
            <title>以太之海</title>
            <url>https://vuejs.org/images/logo.png</url>
            <link>https://blog.vuejs.org</link>
        </image>
        <copyright>🌟的笔记本</copyright>
        <item>
            <link>https://blog.vuejs.orgposts/java-3.html</link>
            <guid>https://blog.vuejs.orgposts/java-3.html</guid>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><div class="abanner" style="background-image: url(../110777046_p1.jpg)"><div class="titlebox"><h1 class="title"></h1><div class="info">🌟的笔记本 · 更新于 2024-09-12</div></div></div><div class="article"><div style="position:relative;" class="content"><div></div></div><div class="content nav"><span><!----></span><span><a href="/posts/java-1.html">Java 学习入门 1 <i class="fa fa-angle-right"></i></a></span></div><div id="waline"></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Java 学习入门 1]]></title>
            <link>https://blog.vuejs.orgposts/java-1.html</link>
            <guid>https://blog.vuejs.orgposts/java-1.html</guid>
            <pubDate>Thu, 12 Sep 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[<h1 id="java-语法基础" tabindex="-1">Java 语法基础 <a class="header-anchor" href="#java-语法基础" aria-label="Permalink to &quot;Java 语法基础&quot;">&ZeroWidthSpace;</a></h1>
]]></description>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><div class="abanner" style="background-image: url(../cover-java.png)"><div class="titlebox"><h1 class="title">Java 学习入门 1</h1><div class="info">🌟的笔记本 · 更新于 2024-09-12</div></div></div><div class="article"><div style="position:relative;" class="content"><div><h1 id="java-语法基础" tabindex="-1">Java 语法基础 <a class="header-anchor" href="#java-语法基础" aria-label="Permalink to &quot;Java 语法基础&quot;">​</a></h1><hr><nav class="table-of-contents"><ul><li><a href="#重点关键字">重点关键字</a><ul><li><a href="#abstract">abstract</a></li><li><a href="#enum">enum</a></li><li><a href="#extends">extends</a></li><li><a href="#final">final</a></li><li><a href="#implements">implements</a></li><li><a href="#interface">interface</a></li><li><a href="#native">native</a></li><li><a href="#private">private</a></li><li><a href="#protected">protected</a></li><li><a href="#public">public</a></li><li><a href="#static">static</a></li><li><a href="#strictfp">strictfp</a></li><li><a href="#super">super</a></li><li><a href="#synchronized">synchronized</a></li><li><a href="#throw-和-throws">throw 和 throws</a></li><li><a href="#transient">transient</a></li><li><a href="#volatile">volatile</a></li></ul></li></ul></nav><h2 id="重点关键字" tabindex="-1">重点关键字 <a class="header-anchor" href="#重点关键字" aria-label="Permalink to &quot;重点关键字&quot;">​</a></h2><h3 id="abstract" tabindex="-1"><code>abstract</code> <a class="header-anchor" href="#abstract" aria-label="Permalink to &quot;`abstract`&quot;">​</a></h3><p>用于声明抽象类或抽象方法。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> abstract</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 抽象类</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> abstract</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> eat</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 抽象方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Dog</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 实现类</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> eat</span><span style="color:#24292E;">() { </span><span style="color:#6A737D;">// 实现方法</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Dog is eating&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><hr><h3 id="enum" tabindex="-1"><code>enum</code> <a class="header-anchor" href="#enum" aria-label="Permalink to &quot;`enum`&quot;">​</a></h3><p>用于声明枚举类型。枚举类型里是一组固定的常量。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> enum</span><span style="color:#6F42C1;"> Color</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">    RED</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">GREEN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BLUE</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><h3 id="extends" tabindex="-1"><code>extends</code> <a class="header-anchor" href="#extends" aria-label="Permalink to &quot;`extends`&quot;">​</a></h3><p>用于指示一个类是从另一个类或接口继承的。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> eat</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;动物正在吃东西&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Dog</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> bark</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;狗在汪汪叫&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> ExtendsDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> static</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Dog dog </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Dog</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        dog.</span><span style="color:#6F42C1;">eat</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        dog.</span><span style="color:#6F42C1;">bark</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><hr><h3 id="final" tabindex="-1"><code>final</code> <a class="header-anchor" href="#final" aria-label="Permalink to &quot;`final`&quot;">​</a></h3><p>用于表示某个变量、方法或类是最终的，不能被修改或继承。</p><ol><li>final 变量：表示一个常量，一旦被赋值，其值就不能再被修改。这在声明不可变的值时非常有用。</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> final</span><span style="color:#D73A49;"> double</span><span style="color:#24292E;"> PI </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 3.14</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>final 方法：表示该方法不能被子类重写。</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    final</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> makeSound</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;动物发出声音.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Dog</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 错误: 无法覆盖来自 Animal 的 final 方法</span></span>
<span class="line"><span style="color:#6A737D;">    // void makeSound() {</span></span>
<span class="line"><span style="color:#6A737D;">    //     System.out.println(&quot;狗吠叫.&quot;);</span></span>
<span class="line"><span style="color:#6A737D;">    // }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Main</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> static</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Dog dog </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Dog</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        dog.</span><span style="color:#6F42C1;">makeSound</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ol start="3"><li>final 类表示一个不能被继承的类。</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">final</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    void</span><span style="color:#6F42C1;"> makeSound</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;动物发出声音.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 错误: 类型 Dog 无法继承 final 类 Animal</span></span>
<span class="line"><span style="color:#6A737D;">// class Dog extends Animal {</span></span>
<span class="line"><span style="color:#6A737D;">//     void makeSound() {</span></span>
<span class="line"><span style="color:#6A737D;">//         System.out.println(&quot;狗吠叫.&quot;);</span></span>
<span class="line"><span style="color:#6A737D;">//     }</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Main</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> static</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Animal animal </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        animal.</span><span style="color:#6F42C1;">makeSound</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><hr><h3 id="implements" tabindex="-1"><code>implements</code> <a class="header-anchor" href="#implements" aria-label="Permalink to &quot;`implements`&quot;">​</a></h3><p>用于实现接口。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 一个实现了 Runnable 接口的类</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyThread</span><span style="color:#D73A49;"> implements</span><span style="color:#6F42C1;"> Runnable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // 线程执行的代码</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><h3 id="interface" tabindex="-1"><code>interface</code> <a class="header-anchor" href="#interface" aria-label="Permalink to &quot;`interface`&quot;">​</a></h3><p>用于声明接口。</p><p>接口类中一般只有声明的方法，没有实现，他们都隐含了 <code>abstract</code> 和 <code>public</code> 修饰符。如果要添加有实现的方法，需要使用 <code>default</code> 关键字。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    void</span><span style="color:#6F42C1;"> eat</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 接口方法（抽象方法）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    default</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> makeSound</span><span style="color:#24292E;">() { </span><span style="color:#6A737D;">// 接口默认方法</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;动物发出声音.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h3 id="native" tabindex="-1"><code>native</code> <a class="header-anchor" href="#native" aria-label="Permalink to &quot;`native`&quot;">​</a></h3><p>用于声明一个方法是由非 Java 语言实现的。声明的方法在 Java 中声明但实现位于本地代码（通常是 C/C++ ），它通常用于与本地库或操作系统交互。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> native</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> nativeMethod</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><h3 id="private" tabindex="-1"><code>private</code> <a class="header-anchor" href="#private" aria-label="Permalink to &quot;`private`&quot;">​</a></h3><p>用于声明私有变量、方法或构造函数。表明其只对当前类可见。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> x; </span><span style="color:#6A737D;">// 私有属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#6A737D;">        // 私有方法</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h3 id="protected" tabindex="-1"><code>protected</code> <a class="header-anchor" href="#protected" aria-label="Permalink to &quot;`protected`&quot;">​</a></h3><p>表示方法或变量对同一包内的类和所有子类可见。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.mypackage;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyBaseClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    protected</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> x; </span><span style="color:#6A737D;">// 受保护的属性 x，可以被子类和同一包中的其他类访问</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    protected</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // 受保护的方法 foo，可以被子类和同一包中的其他类调用</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.mypackage;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MySubClass</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> MyBaseClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> bar</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        x </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 10</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 可以访问 MyBaseClass 中的受保护属性 x</span></span>
<span class="line"><span style="color:#6F42C1;">        foo</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 可以调用 MyBaseClass 中的受保护方法 foo</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><hr><h3 id="public" tabindex="-1"><code>public</code> <a class="header-anchor" href="#public" aria-label="Permalink to &quot;`public`&quot;">​</a></h3><p>用于声明公共变量、方法或构造函数。表明其对所有类可见。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> x; </span><span style="color:#6A737D;">// 公共属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#6A737D;">        // 公共方法</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h3 id="static" tabindex="-1"><code>static</code> <a class="header-anchor" href="#static" aria-label="Permalink to &quot;`static`&quot;">​</a></h3><p>用于声明静态变量、方法或代码块。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> static</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 5</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 静态变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> static</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // 静态方法</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">        // 静态代码块</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>静态变量 <code>x</code> ，静态方法 <code>foo</code> 和静态代码块在类加载时就会被初始化，不需要实例化对象。可以直接通过类名.变量名或类名.方法名调用。</p><hr><h3 id="strictfp" tabindex="-1"><code>strictfp</code> <a class="header-anchor" href="#strictfp" aria-label="Permalink to &quot;`strictfp`&quot;">​</a></h3><p>通常用于修饰一个方法，用于限制浮点数计算的精度和舍入行为。当你在类、接口或方法上使用 strictfp 时，该范围内的所有浮点数计算将遵循 IEEE 754 标准的规定，以确保跨平台的浮点数计算的一致性。</p><p>不同的硬件平台和 JVM 实现可能对浮点数计算的精度和舍入行为有差异，这可能导致在不同环境中运行相同的浮点数计算代码产生不同的结果。使用 strictfp 关键字可以确保在所有平台上获得相同的浮点数计算结果，避免计算结果的不一致问题。</p><p>但请注意，使用 strictfp 可能会对性能产生影响，因为可能需要更多的计算和转换来确保遵循 IEEE 754 标准。因此，在使用 strictfp 时，需要权衡精度和一致性与性能之间的关系。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> strictfp</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    strictfp</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // 严格浮点运算</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><h3 id="super" tabindex="-1"><code>super</code> <a class="header-anchor" href="#super" aria-label="Permalink to &quot;`super`&quot;">​</a></h3><p>用于调用父类的构造函数、属性和方法。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> eat</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;动物正在吃东西&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Dog</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> bark</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;狗在汪汪叫&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> eat</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">        super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">eat</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 调用父类的 eat 方法</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;狗正在吃东西&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><hr><h3 id="synchronized" tabindex="-1"><code>synchronized</code> <a class="header-anchor" href="#synchronized" aria-label="Permalink to &quot;`synchronized`&quot;">​</a></h3><p>用于声明同步方法或同步代码块。</p><p>(<strong>加锁</strong>)</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> count;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> synchronized</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> increment</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 同步方法</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> doSomething</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">        synchronized</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 同步代码块</span></span>
<span class="line"><span style="color:#6A737D;">            // 执行一些需要同步的操作</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><hr><h3 id="throw-和-throws" tabindex="-1"><code>throw</code> 和 <code>throws</code> <a class="header-anchor" href="#throw-和-throws" aria-label="Permalink to &quot;`throw` 和 `throws`&quot;">​</a></h3><ol><li><code>throw</code> 用于抛出一个异常对象。<strong>是主动抛出 xx 异常</strong></li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">        throw</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Exception</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;抛出一个异常&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li><code>throws</code> 用于声明一个方法可能抛出的异常。<strong>是声明这个方法可能会抛出 xx 异常</strong></li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#6A737D;">        // 可能抛出异常的代码</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><h3 id="transient" tabindex="-1"><code>transient</code> <a class="header-anchor" href="#transient" aria-label="Permalink to &quot;`transient`&quot;">​</a></h3><p>用于声明一个变量不会被序列化。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#D73A49;"> implements</span><span style="color:#6F42C1;"> Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#D73A49;"> transient</span><span style="color:#24292E;"> String password; </span><span style="color:#6A737D;">// 不会被序列化</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这个示例中，MyClass 类实现了 Serializable 接口，表示该类的对象可以被序列化。该类有三个成员变量，分别是 id、name 和 password。其中，password 成员变量被标记为 transient，表示在序列化过程中忽略这个成员变量。</p><hr><h3 id="volatile" tabindex="-1"><code>volatile</code> <a class="header-anchor" href="#volatile" aria-label="Permalink to &quot;`volatile`&quot;">​</a></h3><p>用于声明一个变量是易变的，即使在多线程环境下，该变量的值也不会被缓存。即一个线程修改了某个变量的值，新值对其他线程来说是立即可见的。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyThread</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> Thread</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#D73A49;"> volatile</span><span style="color:#D73A49;"> boolean</span><span style="color:#24292E;"> running </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> true</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">        while</span><span style="color:#24292E;"> (running) {</span></span>
<span class="line"><span style="color:#6A737D;">            // 线程执行的代码</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> stopThread</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        running </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在这个示例中，MyThread 类继承了 Thread 类，其中声明了一个 volatile 类型的成员变量 running。在 run 方法中，通过 while 循环不断检查 running 的值，如果 running 为 true，则继续执行线程的代码；如果 running 为 false，则退出循环，线程终止。</p><hr></div></div><div class="content nav"><span><a href="/posts/java-3.html"><i class="fa fa-angle-left"></i> </a></span><span><a href="/posts/java-2.html">Java 学习入门 2 <i class="fa fa-angle-right"></i></a></span></div><div id="waline"></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Java 学习入门 2]]></title>
            <link>https://blog.vuejs.orgposts/java-2.html</link>
            <guid>https://blog.vuejs.orgposts/java-2.html</guid>
            <pubDate>Thu, 12 Sep 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[<h1 id="java-语法基础" tabindex="-1">Java 语法基础 <a class="header-anchor" href="#java-语法基础" aria-label="Permalink to &quot;Java 语法基础&quot;">&ZeroWidthSpace;</a></h1>
]]></description>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><div class="abanner" style="background-image: url(../cover-java.png)"><div class="titlebox"><h1 class="title">Java 学习入门 2</h1><div class="info">🌟的笔记本 · 更新于 2024-09-12</div></div></div><div class="article"><div style="position:relative;" class="content"><div><h1 id="java-语法基础" tabindex="-1">Java 语法基础 <a class="header-anchor" href="#java-语法基础" aria-label="Permalink to &quot;Java 语法基础&quot;">​</a></h1><hr><nav class="table-of-contents"><ul><li><a href="#数据类型">数据类型</a><ul><li><a href="#基本数据类型">基本数据类型</a></li><li><a href="#引用数据类型">引用数据类型</a></li></ul></li><li><a href="#数据类型转换">数据类型转换</a><ul><li><a href="#_1-自动类型转换">1. 自动类型转换</a></li><li><a href="#强制类型转换">强制类型转换</a></li></ul></li><li><a href="#基本数据类型缓存池">基本数据类型缓存池</a></li></ul></nav><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p>Java 的数据类型分为两大类：基本数据类型和引用数据类型。</p><h3 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>数据类型</th><th>默认值</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>boolean</td><td>false</td><td>不确定</td><td>true 或 false</td></tr><tr><td>byte</td><td>0</td><td>1 字节</td><td>-128 ~ 127</td></tr><tr><td>short</td><td>0</td><td>2 字节</td><td>-32768 ~ 32767</td></tr><tr><td>int</td><td>0</td><td>4 字节</td><td>$-2^{31} \sim 2^{31}-1$</td></tr><tr><td>long</td><td>0L</td><td>8 字节</td><td>$-2^{63} \sim 2^{63}-1$</td></tr><tr><td>float</td><td>0.0f</td><td>4 字节</td><td>不精确</td></tr><tr><td>double</td><td>0.0d</td><td>8 字节</td><td>不精确</td></tr><tr><td>char</td><td>&#39;\u0000&#39;</td><td>2 字节</td><td>0 ~ 65535</td></tr></tbody></table><h3 id="引用数据类型" tabindex="-1">引用数据类型 <a class="header-anchor" href="#引用数据类型" aria-label="Permalink to &quot;引用数据类型&quot;">​</a></h3><p>引用数据类型包括类、接口、数组等。<code>String</code> 就是典型的引用数据类型。</p><h4 id="包装器类型" tabindex="-1">包装器类型 <a class="header-anchor" href="#包装器类型" aria-label="Permalink to &quot;包装器类型&quot;">​</a></h4><p>包装器类型是引用数据类型，它们是基本数据类型的封装类。Java 提供了 8 个包装器类型，分别对应 8 种基本数据类型。</p><ul><li>Byte（对应 byte）</li><li>Short（对应 short）</li><li>Integer（对应 int）</li><li>Long（对应 long）</li><li>Float（对应 float）</li><li>Double（对应 double）</li><li>Character（对应 char）</li><li>Boolean（对应 boolean）</li></ul><h2 id="数据类型转换" tabindex="-1">数据类型转换 <a class="header-anchor" href="#数据类型转换" aria-label="Permalink to &quot;数据类型转换&quot;">​</a></h2><h3 id="_1-自动类型转换" tabindex="-1">1. 自动类型转换 <a class="header-anchor" href="#_1-自动类型转换" aria-label="Permalink to &quot;1. 自动类型转换&quot;">​</a></h3><p>自动类型转换（自动类型提升）是 Java 编译器在不需要显式转换的情况下，将一种基本数据类型自动转换为另一种基本数据类型的过程。这种转换通常发生在表达式求值期间，当不同类型的数据需要相互兼容时。</p><ul><li>如果任一操作数是 double 类型，其他操作数将被转换为 double 类型。</li><li>否则，如果任一操作数是 float 类型，其他操作数将被转换为 float 类型。</li><li>否则，如果任一操作数是 long 类型，其他操作数将被转换为 long 类型。</li><li>否则，所有操作数将被转换为 int 类型。</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 50</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Type mismatch: cannot convert from int to byte</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这段代码看似没有错误，但实际上会报错。因为 <code>b * 2</code> 的结果是 <code>int</code> 类型（运行时会提升到 <code>2</code> 对应的 <code>int</code> 型），需要强制转换为 <code>byte</code> 类型。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 50</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">)(b</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>但如果是：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 50</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">b </span><span style="color:#D73A49;">*=</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>则不会报错，因为 <code>b *= 2</code> 相当于 <code>b = (byte)(b*2)</code>。</p></div><h3 id="强制类型转换" tabindex="-1">强制类型转换 <a class="header-anchor" href="#强制类型转换" aria-label="Permalink to &quot;强制类型转换&quot;">​</a></h3><p>强制类型转换是 Java 中将一种数据类型显式转换为另一种数据类型的过程。与自动类型转换不同，强制类型转换需要程序员显式地指定要执行的转换。强制类型转换在以下情况中可能需要：</p><ul><li>将较大的数据类型转换为较小的数据类型。</li><li>将浮点数转换为整数。</li><li>将字符类型转换为数值类型。</li></ul><p><strong>强制类型转换可能导致数据丢失或者精度降低，所以转换前要确保不会发生数据溢出或者精度丢失。</strong></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> doubleValue </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 42.8</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 强制类型转换：将 double 类型转换为 int 类型</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> intValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) doubleValue;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;整数值: &quot;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> intValue); </span><span style="color:#6A737D;">// 输出：整数值: 42</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>思考这四个算式的结果：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1500000000</span><span style="color:#24292E;">, b </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1500000000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> sum1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> sum2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">long</span><span style="color:#24292E;">)a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> sum3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">long</span><span style="color:#24292E;">)(a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>结果应该是：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span>-1294967296</span></span>
<span class="line"><span>-1294967296</span></span>
<span class="line"><span>3000000000</span></span>
<span class="line"><span>-1294967296</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>a + b</code> 的结果是 <code>3000000000</code>，但是由于 <code>a</code> 和 <code>b</code> 都是 <code>int</code> 类型，所以结果会溢出，变成 <code>-1294967296</code>。</li><li><code>sum1</code> 是先计算两个 <code>int</code> 型的和，得到溢出的结果，最后赋值给 <code>long</code>。</li><li><code>sum2</code> 是先将 <code>a</code> 强制转换为 <code>long</code> 类型，然后再和 <code>b</code> 相加。此时 <code>b</code> 因为算式中有 <code>long</code> 类型，被自动提升到 <code>long</code>，因此不会溢出。</li><li><code>sum3</code> 是先计算 <code>a + b</code>，然后再强制转换为 <code>long</code> 类型。因为 <code>a + b</code> 的结果已经溢出，所以转换后的结果也是溢出的。</li></ul></div><h2 id="基本数据类型缓存池" tabindex="-1">基本数据类型缓存池 <a class="header-anchor" href="#基本数据类型缓存池" aria-label="Permalink to &quot;基本数据类型缓存池&quot;">​</a></h2><p>Java 为了提高性能，对于基本数据类型的包装类，提供了缓存池来避免频繁地创建对象。这样可以减少内存的开销，提高性能。</p><p>例如 <code>new Integer(18)</code> 和 <code>Integer.valueOf(18)</code> 的区别：前者每次都会创建一个新的对象，而后者会先检查缓存池中是否存在该对象，如果存在则直接返回，否则创建新对象。这样多次调用后者，也只会一直指向一个对象的引用。</p><p>除了 <code>Float</code> 和 <code>Double</code> 类型，其他的包装类都实现了缓存池技术。</p><ul><li>Byte：-128~127，也就是所有的 byte 值</li><li>Short：-128~127</li><li>Long：-128~127</li><li>Character：\u0000 - \u007F</li><li>Boolean：true 和 false</li></ul></div></div><div class="content nav"><span><a href="/posts/java-1.html"><i class="fa fa-angle-left"></i> Java 学习入门 1</a></span><span><a href="/posts/drg-texture-mod-guide.html">Basic Texture Modding Guide for DRG <i class="fa fa-angle-right"></i></a></span></div><div id="waline"></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Basic Texture Modding Guide for DRG]]></title>
            <link>https://blog.vuejs.orgposts/drg-texture-mod-guide.html</link>
            <guid>https://blog.vuejs.orgposts/drg-texture-mod-guide.html</guid>
            <pubDate>Mon, 10 Jun 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><div class="abanner" style="background-image: url(https://thumb.modcdn.io/mods/cf36/2702074/thumb_1020x2000/ele.png)"><div class="titlebox"><h1 class="title">Basic Texture Modding Guide for DRG</h1><div class="info">🌟的笔记本 · 更新于 2024-06-10</div></div></div><div class="article"><div style="position:relative;" class="content"><div><hr><h1 id="guide" tabindex="-1">Guide <a class="header-anchor" href="#guide" aria-label="Permalink to &quot;Guide&quot;">​</a></h1><hr><ul><li><a href="#intro">1. Introduction</a><ul><li><a href="#tools">Tools</a></li><li><a href="#more-guides">More Guides</a></li></ul></li><li><a href="#exp">2. Example(main sections of the guide)</a></li><li><a href="#tips">3. Advanced tips</a></li></ul><hr><h2 id="intro" tabindex="-1">1. Introduction <a class="header-anchor" href="#intro" aria-label="Permalink to &quot;1. Introduction {#intro}&quot;">​</a></h2><h3 id="tools" tabindex="-1">Tools <a class="header-anchor" href="#tools" aria-label="Permalink to &quot;Tools&quot;">​</a></h3><p>Before you start making a texture replacement mod, you need the following tools (<strong>* indicates required</strong>):</p><ul><li>DRGPacker*</li><li>Unreal Engine <code>4.27.2</code>*</li><li>Fmodel</li><li>FSD Full Asset Content(Community Modkit)</li><li><a href="https://github.com/DRG-Modding/FSD-Template" target="_blank" rel="noreferrer">FSD template</a></li><li>Latest game</li></ul><h3 id="more-guides" tabindex="-1">More Guides <a class="header-anchor" href="#more-guides" aria-label="Permalink to &quot;More Guides&quot;">​</a></h3><p>You can also read other guides on <a href="https://mod.io/g/drg/r" target="_blank" rel="noreferrer">mod.io</a>.</p><p>If you have no modding experience, it is highly recommended that you read the <a href="https://mod.io/g/drg/r/drg-basic-modding-guide" target="_blank" rel="noreferrer">DRG Basic Modding Guide</a> first.</p><h2 id="exp" tabindex="-1">2. Example <a class="header-anchor" href="#exp" aria-label="Permalink to &quot;2. Example {#exp}&quot;">​</a></h2><p><img src="https://thumb.modcdn.io/mods/cf36/2702074/thumb_1020x2000/ele.png" alt="Example Project"></p><p>I will be using the <a href="https://mod.io/g/drg/m/remove-damage-overlays" target="_blank" rel="noreferrer">Remove Damage Overlays</a> project as an example for the basic texture mod guide. Modifying other game textures is similar to that.</p><ol><li><p>Setting up your Unreal Engine workspace</p><p>You can either create a new Unreal Engine project or use the <code>FSD template</code>. I&#39;ll demonstrate the latter here.</p><ul><li><p>First, find a directory you like and clone the FSD template using Git like this.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#032F62;"> clone</span><span style="color:#032F62;"> https://github.com/DRG-Modding/FSD-Template.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If you don&#39;t have Git installed, you can also go to the project&#39;s <a href="https://github.com/DRG-Modding/FSD-Template" target="_blank" rel="noreferrer">repository</a> page and download a zip archive of the code like this. Unzip it wherever you want.</p><!----></li></ul></li><li><p>Locate and prepare the texture</p><p>First, find the location and source file of the texture you want to replace. I will show you how to use fmodel to find the texture you want to modify.</p><ul><li><p>Open Fmodel</p></li><li><p>Click <code>Directory--&gt;Selector</code> in the upper navigation bar</p></li><li><p>In the newly opened window, select the directory where your game Pak file is located. It should look like this: <code>steamapps\common\Deep Rock Galactic\FSD\Content\Paks</code>. Then click OK, fmodel will auto-restart.</p></li></ul><!----><ul><li>In the reopened Fmodel, you should be able to see a menu like this on the left, which should contain all the Pak files of the game.</li></ul><!----><ul><li><p>Double-click FSD-Windows-NoEditor.pak to open it. In the page that opens next, find the location of the texture you want to modify. For example, the hit HUD in this example is <code>Content\Art\UI</code>.</p></li><li><p>After navigating and selecting the correct folder, select Packages at the top (to the right of Folders). You will see a lot of uasset files, double click them to preview them. Select the files you want to modify, <code>Right Click --&gt; Save Texture (PNG)</code> to export them as images.</p></li></ul><!----><ul><li>Use Photoshop or any other processing software to make the changes you want.</li></ul></li><li><p>Start replacing specific textures</p><p>First, double-click to open the project file <code>FSD.uproject</code>.</p><p>Then we need to find the location of the textures you want to replace - in this case, they are all located in the <code>Content\Art\UI</code> directory. So we create the same directory in Content Browser.</p><p>Open the corresponding directory in the Content Browser and drag the replacement texture (PNG format) you prepared into it through Windows Explorer.</p><p>Change all of them to the exact same names as the original ones. For example <code>HUD_DamageOverlay_Blood</code>.</p><!----><p>Now you have completed most of the operations, and the only thing left is to package the mod.</p></li><li><p>Package(Cook) your mod</p><ul><li><p>UE work</p><p>Go into the <code>Untitled</code> tab. Click <code>File --&gt; Package Project --&gt; Packaging Settings</code>.</p><!----><p>Search for &quot;never cook&quot;. Remove the folder(s) where your modified files are in. In this case is <code>Content\Art</code>.</p><!----><p>At last, go into the <code>Untitled</code> tab. Click <code>File --&gt; Package Project --&gt; Windows (64-bit)</code>. Choose a output folder for it.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you package the project more than once, I recommend that you completely delete all the files output by the previous package before each package. It should be the <code>WindowsNoEditor</code> folder.</p></div></li><li><p>DRG packer work</p><p>Find the directory where your DRG Packer is located. Create a new folder with any legal name.</p><p>Open the directory where you packaged and output in UE, and copy the <code>Content</code> directory into your new folder. If there are files like <code>ShaderArchive-xxxxxxx.ushaderbytecode</code> in the <code>Content</code> directory, delete them directly. You don&#39;t need these files when packaging your mod.</p><p>Drag your mod folder onto <code>_Repack.bat</code> in Windows Explorer, and DRG Packer will start packing your mod. The packed mod file will be in the same directory, called <code>Mod.pak</code> (the file name is the same as your mod folder).</p></li></ul></li></ol><p>At this point, you have completed the creation of this texture replacement mod. Congratulations!</p><p>The production of other texture replacement mods is similar to this one. The biggest difficulty is how to find where the texture you need to modify is, and how to make the modified texture more beautiful (it is very sad that I am not good at art work 😭).</p><h2 id="tips" tabindex="-1">3. Advanced Tips <a class="header-anchor" href="#tips" aria-label="Permalink to &quot;3. Advanced Tips {#tips}&quot;">​</a></h2><ul><li><p>If you are creating your own Unreal project instead of using the <code>FSD template</code>, and the mod you are making does not involve Blueprint functionality or code changes, you can actually name it anything legal, it does not have to be <code>FSD</code>.</p></li><li><p>If you are just making some simple mods that do not use the blueprint function and mainly replace the game&#39;s materials (audio/model/image/text), I strongly recommend that you install and use the <a href="https://github.com/hxhb/HotPatcher" target="_blank" rel="noreferrer">HotPatcher</a> plugin. This is a free Unreal Engine plugin that has many powerful functions.</p><p>You only need to know that the <a href="https://github.com/hxhb/HotPatcher" target="_blank" rel="noreferrer">HotPatcher</a> plugin can be used to <strong>cook one or more assets separately</strong> without packaging the entire project.</p><p>Of course you can use it to cook blueprints too but it might cause some issue in unknown case.</p></li></ul></div></div><div class="content nav"><span><a href="/posts/java-2.html"><i class="fa fa-angle-left"></i> Java 学习入门 2</a></span><span><a href="/posts/api-examples.html">API 示例 <i class="fa fa-angle-right"></i></a></span></div><div id="waline"></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[API 示例]]></title>
            <link>https://blog.vuejs.orgposts/api-examples.html</link>
            <guid>https://blog.vuejs.orgposts/api-examples.html</guid>
            <pubDate>Sat, 08 Jun 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><div class="abanner" style="background-image: url(../110777046_p1.jpg)"><div class="titlebox"><h1 class="title">API 示例</h1><div class="info">🌟的笔记本 · 更新于 2024-06-08</div></div></div><div class="article"><div style="position:relative;" class="content"><div><h1 id="runtime-api-examples" tabindex="-1">Runtime API Examples <a class="header-anchor" href="#runtime-api-examples" aria-label="Permalink to &quot;Runtime API Examples&quot;">​</a></h1><p>This page demonstrates usage of some of the runtime APIs provided by VitePress.</p><p>The main <code>useData()</code> API can be used to access site, theme, and page data for the current page. It works in both <code>.md</code> and <code>.vue</code> files:</p><div class="language-md line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useData } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;vitepress&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">theme</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">page</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">frontmatter</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> useData</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;font-weight:bold;">## Results</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;font-weight:bold;">### Theme Data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">pre</span><span style="color:#24292E;">&gt;{{ theme }}&lt;/</span><span style="color:#22863A;">pre</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">### Page Data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">pre</span><span style="color:#24292E;">&gt;{{ page }}&lt;/</span><span style="color:#22863A;">pre</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">### Page Frontmatter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">pre</span><span style="color:#24292E;">&gt;{{ frontmatter }}&lt;/</span><span style="color:#22863A;">pre</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="results" tabindex="-1">Results <a class="header-anchor" href="#results" aria-label="Permalink to &quot;Results&quot;">​</a></h2><h3 id="theme-data" tabindex="-1">Theme Data <a class="header-anchor" href="#theme-data" aria-label="Permalink to &quot;Theme Data&quot;">​</a></h3><pre>{
  &quot;name&quot;: &quot;🌟的笔记本&quot;,
  &quot;hello&quot;: &quot;🌟世界！&quot;,
  &quot;motto&quot;: &quot;Bright star, would I were stedfast as thou art.&quot;,
  &quot;cover&quot;: &quot;../110777046_p1.jpg&quot;,
  &quot;social&quot;: [
    {
      &quot;icon&quot;: &quot;fa-github&quot;,
      &quot;url&quot;: &quot;https://github.com/star-whisper9&quot;
    },
    {
      &quot;icon&quot;: &quot;fa-steam&quot;,
      &quot;url&quot;: &quot;https://steamcommunity.com/id/Star-Whisper-S/&quot;
    }
  ]
}</pre><h3 id="page-data" tabindex="-1">Page Data <a class="header-anchor" href="#page-data" aria-label="Permalink to &quot;Page Data&quot;">​</a></h3><pre>{
  &quot;title&quot;: &quot;API 示例&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;frontmatter&quot;: {
    &quot;title&quot;: &quot;API 示例&quot;,
    &quot;date&quot;: &quot;2024-06-08T00:00:00.000Z&quot;,
    &quot;tags&quot;: [
      &quot;devpage&quot;
    ]
  },
  &quot;headers&quot;: [],
  &quot;relativePath&quot;: &quot;posts/api-examples.md&quot;,
  &quot;filePath&quot;: &quot;posts/api-examples.md&quot;
}</pre><h3 id="page-frontmatter" tabindex="-1">Page Frontmatter <a class="header-anchor" href="#page-frontmatter" aria-label="Permalink to &quot;Page Frontmatter&quot;">​</a></h3><pre>{
  &quot;title&quot;: &quot;API 示例&quot;,
  &quot;date&quot;: &quot;2024-06-08T00:00:00.000Z&quot;,
  &quot;tags&quot;: [
    &quot;devpage&quot;
  ]
}</pre><h2 id="more" tabindex="-1">More <a class="header-anchor" href="#more" aria-label="Permalink to &quot;More&quot;">​</a></h2><p>Check out the documentation for the <a href="https://vitepress.dev/reference/runtime-api#usedata" target="_blank" rel="noreferrer">full list of runtime APIs</a>.</p></div></div><div class="content nav"><span><a href="/posts/drg-texture-mod-guide.html"><i class="fa fa-angle-left"></i> Basic Texture Modding Guide for DRG</a></span><span><a href="/posts/image_test.html">图片组件测试 <i class="fa fa-angle-right"></i></a></span></div><div id="waline"></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[图片组件测试]]></title>
            <link>https://blog.vuejs.orgposts/image_test.html</link>
            <guid>https://blog.vuejs.orgposts/image_test.html</guid>
            <pubDate>Sat, 08 Jun 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><div class="abanner" style="background-image: url(../2022-9-5_18-35-35.png)"><div class="titlebox"><h1 class="title">图片组件测试</h1><div class="info">🌟的笔记本 · 更新于 2024-06-08</div></div></div><div class="article"><div style="position:relative;" class="content"><div><p><img src="/assets/2022-9-5_18-35-35.BDgsurfz.png" alt="测试图片" title="测试图片"></p><ul><li>上方这张是 Markdown 图片</li><li>下方这张是 Medium Zoom 组件图片</li></ul><img src="../static/2022-9-5_18-35-35.png" alt="测试图片" title="测试图片"></div></div><div class="content nav"><span><a href="/posts/api-examples.html"><i class="fa fa-angle-left"></i> API 示例</a></span><span><a href="/posts/markdown-examples.html">Markdown 示例 <i class="fa fa-angle-right"></i></a></span></div><div id="waline"></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Markdown 示例]]></title>
            <link>https://blog.vuejs.orgposts/markdown-examples.html</link>
            <guid>https://blog.vuejs.orgposts/markdown-examples.html</guid>
            <pubDate>Sat, 08 Jun 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><div class="abanner" style="background-image: url(../110777046_p1.jpg)"><div class="titlebox"><h1 class="title">Markdown 示例</h1><div class="info">🌟的笔记本 · 更新于 2024-06-08</div></div></div><div class="article"><div style="position:relative;" class="content"><div><h1 id="markdown-extension-examples" tabindex="-1">Markdown Extension Examples <a class="header-anchor" href="#markdown-extension-examples" aria-label="Permalink to &quot;Markdown Extension Examples&quot;">​</a></h1><p>This page demonstrates some of the built-in markdown extensions provided by VitePress.</p><h2 id="syntax-highlighting" tabindex="-1">Syntax Highlighting <a class="header-anchor" href="#syntax-highlighting" aria-label="Permalink to &quot;Syntax Highlighting&quot;">​</a></h2><p>VitePress provides Syntax Highlighting powered by <a href="https://github.com/shikijs/shiki" target="_blank" rel="noreferrer">Shiki</a>, with additional features like line-highlighting:</p><p><strong>Input</strong></p><div class="language-md line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">```js{4}</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  data</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      msg: </span><span style="color:#032F62;">&#39;Highlighted!&#39;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">```</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>Output</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  data</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">      msg: </span><span style="color:#032F62;">&#39;Highlighted!&#39;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="custom-containers" tabindex="-1">Custom Containers <a class="header-anchor" href="#custom-containers" aria-label="Permalink to &quot;Custom Containers&quot;">​</a></h2><p><strong>Input</strong></p><div class="language-md line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">::: info</span></span>
<span class="line"><span style="color:#24292E;">This is an info box.</span></span>
<span class="line"><span style="color:#24292E;">:::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">::: tip</span></span>
<span class="line"><span style="color:#24292E;">This is a tip.</span></span>
<span class="line"><span style="color:#24292E;">:::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">::: warning</span></span>
<span class="line"><span style="color:#24292E;">This is a warning.</span></span>
<span class="line"><span style="color:#24292E;">:::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">::: danger</span></span>
<span class="line"><span style="color:#24292E;">This is a dangerous warning.</span></span>
<span class="line"><span style="color:#24292E;">:::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">::: details</span></span>
<span class="line"><span style="color:#24292E;">This is a details block.</span></span>
<span class="line"><span style="color:#24292E;">:::</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><strong>Output</strong></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This is an info box.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This is a tip.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This is a warning.</p></div><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>This is a dangerous warning.</p></div><details class="details custom-block"><summary>Details</summary><p>This is a details block.</p></details><h2 id="more" tabindex="-1">More <a class="header-anchor" href="#more" aria-label="Permalink to &quot;More&quot;">​</a></h2><p>Check out the documentation for the <a href="https://vitepress.dev/guide/markdown" target="_blank" rel="noreferrer">full list of markdown extensions</a>.</p></div></div><div class="content nav"><span><a href="/posts/image_test.html"><i class="fa fa-angle-left"></i> 图片组件测试</a></span><span><a href="/posts/cover-examples.html">封面与预览示例 <i class="fa fa-angle-right"></i></a></span></div><div id="waline"></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[封面与预览示例]]></title>
            <link>https://blog.vuejs.orgposts/cover-examples.html</link>
            <guid>https://blog.vuejs.orgposts/cover-examples.html</guid>
            <pubDate>Fri, 02 Jan 1970 00:00:00 GMT</pubDate>
            <description><![CDATA[<p>这里的文字会作为预览显示在文章列表中。</p>
]]></description>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><div class="abanner" style="background-image: url(../cover-exp.jpg)"><div class="titlebox"><h1 class="title">封面与预览示例</h1><div class="info">🌟的笔记本 · 更新于 1970-01-02</div></div></div><div class="article"><div style="position:relative;" class="content"><div><p>这里的文字会作为预览显示在文章列表中。</p><hr><p>这里的文字点进文章才能看到。</p><p>封面可以是网络地址，也可以是绝对路径。需要使用引号包含。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>最好不要使用相对路径，容易出错。</p></div></div></div><div class="content nav"><span><a href="/posts/markdown-examples.html"><i class="fa fa-angle-left"></i> Markdown 示例</a></span><span><!----></span></div><div id="waline"></div></div><!--]-->]]></content:encoded>
        </item>
    </channel>
</rss>