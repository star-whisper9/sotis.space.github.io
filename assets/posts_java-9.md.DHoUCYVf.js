import{_ as s,c as n,a,y as l}from"./chunks/framework.BmiwJf14.js";const m=JSON.parse('{"title":"Java 学习入门 9","description":"","frontmatter":{"title":"Java 学习入门 9","date":"2024-09-14T11:30:00.000Z","tags":["Java","code"],"cover":"../cover-java.png"},"headers":[],"relativePath":"posts/java-9.md","filePath":"posts/java-9.md"}'),p={name:"posts/java-9.md"},e=l(`<h1 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h1><hr><nav class="table-of-contents"><ul><li><a href="#内部类">内部类</a><ul><li><a href="#成员内部类">成员内部类</a></li><li><a href="#静态内部类">静态内部类</a></li><li><a href="#局部内部类">局部内部类</a></li><li><a href="#匿名内部类">匿名内部类</a></li></ul></li></ul></nav><hr><h2 id="内部类" tabindex="-1">内部类 <a class="header-anchor" href="#内部类" aria-label="Permalink to &quot;内部类&quot;">​</a></h2><h3 id="成员内部类" tabindex="-1">成员内部类 <a class="header-anchor" href="#成员内部类" aria-label="Permalink to &quot;成员内部类&quot;">​</a></h3><p>成员内部类和成员变量、方法一样，是对象所有的，只有在创建了外部类对象之后，才能创建成员内部类的对象。</p><ul><li><p>首先定义内部类</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Outer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Inner</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">        private</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">        public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> show</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a = &quot;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> a);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>创建对象</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">Outer outer </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Outer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Outer.Inner inner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> outer.</span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Inner</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>访问内部类的成员变量和方法</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(inner.a);</span></span>
<span class="line"><span style="color:#24292E;">inner.</span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>如果我们把成员内部类定义为 <code>private</code> 的，那么就只能在它的外部类访问了。</p></li><li><p>在成员内部类中也是能直接访问外部类的成员变量的，即使是 <code>private</code> 修饰的。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Outer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  private</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Inner</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">      private</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">      public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> show</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">          System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a = &quot;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> a);</span></span>
<span class="line"><span style="color:#24292E;">          System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;x = &quot;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> x);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>如果有同名的变量/方法怎么办呢？ 像这样的一个类：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Demo</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">  private</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Inner</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">      private</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">      public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> show</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#E36209;"> x</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">          System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这里 <code>show(int x)</code> 中打印出的是传入参数 <code>int x</code>。如果在内部类中要访问到内部类的 <code>x</code>，可以在内部类中使用 <code>this.x</code>；如果是外部类的 <code>x</code>，可以使用 <code>Demo.this.x</code>。</p></li></ul><h3 id="静态内部类" tabindex="-1">静态内部类 <a class="header-anchor" href="#静态内部类" aria-label="Permalink to &quot;静态内部类&quot;">​</a></h3><p>静态内部类和静态变量、方法一样，是类所有的，不需要依赖外部类的对象。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Test</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#D73A49;"> final</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#6F42C1;"> Test</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#005CC5;">        this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> static</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Inner</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">        public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> test</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我是静态内部类！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>使用时可以直接创建静态内部类的对象：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">Test.Inner inner </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#24292E;"> Test.</span><span style="color:#6F42C1;">Inner</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">inner.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>静态内部类由于是静态的，所以不能访问外部类的非静态成员变量和方法。</p><p>比如如果将 <code>test()</code> 方法修改一下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> test</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(name); </span><span style="color:#6A737D;">// 这里会报错，name 是外部类的非静态成员变量</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="局部内部类" tabindex="-1">局部内部类 <a class="header-anchor" href="#局部内部类" aria-label="Permalink to &quot;局部内部类&quot;">​</a></h3><p>作用范围只在方法内部。使用很少，了解即可。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Outer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> show</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">        class</span><span style="color:#6F42C1;"> Inner</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">            public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> show</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我是局部内部类！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Inner inner </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Inner</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 局部内部类直接使用类名称就行</span></span>
<span class="line"><span style="color:#24292E;">        inner.</span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="匿名内部类" tabindex="-1">匿名内部类 <a class="header-anchor" href="#匿名内部类" aria-label="Permalink to &quot;匿名内部类&quot;">​</a></h3><p>匿名内部类的使用频次很高，比如在事件处理中，可以理解为是局部内部类的一种简化写法。</p><p>我们并不能直接实例化一个抽象类或接口，但是可以通过匿名内部类的方式来实现。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> abstract</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 接口也类似</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> abstract</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> eat</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> static</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) {</span></span>
<span class="line"><span style="color:#24292E;">    Animal animal </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">        public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> eat</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;吃东西&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    animal.</span><span style="color:#6F42C1;">eat</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在 <code>new</code> 之后直接使用花括号将需要实现的抽象方法实现。这样，我们就通过匿名内部类创建了一个 <code>Animal</code> 抽象类的对象。</p><p>匿名内部类也可以使用类中的属性，因为本质上是子类，子类定义一些子类的属性是可以的。</p>`,26),o=[e];function r(c,t,i,y,b,u){return a(),n("div",null,o)}const v=s(p,[["render",r]]);export{m as __pageData,v as default};
