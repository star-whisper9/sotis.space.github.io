import{_ as s,c as a,a as e,y as n}from"./chunks/framework.BmiwJf14.js";const g=JSON.parse('{"title":"Java 学习入门 7","description":"","frontmatter":{"title":"Java 学习入门 7","date":"2024-09-13T14:00:00.000Z","tags":["Java","code"],"cover":"../cover-java.png"},"headers":[],"relativePath":"posts/java-7.md","filePath":"posts/java-7.md"}'),l={name:"posts/java-7.md"},o=n(`<h1 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h1><hr><nav class="table-of-contents"><ul><li><a href="#string-类">String 类</a><ul><li><a href="#字符串的创建">字符串的创建</a></li><li><a href="#字符串的常用方法">字符串的常用方法</a></li></ul></li><li><a href="#字符串拼接-stringbuffer-和-stringbuilder">字符串拼接（StringBuffer 和 StringBuilder）</a></li></ul></nav><hr><h2 id="string-类" tabindex="-1">String 类 <a class="header-anchor" href="#string-类" aria-label="Permalink to &quot;String 类&quot;">​</a></h2><ol><li><code>String</code> 类是 <code>final</code> 的，不能被继承。</li><li>字符串是不可变的，一旦创建，就不能被修改。</li><li><code>String</code> 类实现了 <code>Serializable</code> 接口和 <code>Comparable</code> 接口。意味着它可以被序列化，比较字符串时最好不要使用 <code>==</code>，而是使用 <code>compareTo()</code> 方法。</li></ol><h3 id="字符串的创建" tabindex="-1">字符串的创建 <a class="header-anchor" href="#字符串的创建" aria-label="Permalink to &quot;字符串的创建&quot;">​</a></h3><ol><li>字面量</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">String str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;Stardust&quot;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>优点：简单、直观。如果有多个相同的字符串，会复用相同的对象（字符串常量池）。</p><ol start="2"><li><code>new</code></li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">String str </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Stardust&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>每次都会创建一个新的对象，不会复用。</p><h3 id="字符串的常用方法" tabindex="-1">字符串的常用方法 <a class="header-anchor" href="#字符串的常用方法" aria-label="Permalink to &quot;字符串的常用方法&quot;">​</a></h3><ol><li><code>length()</code></li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">String str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;Stardust&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li><code>charAt(int index)</code></li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">String str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;Stardust&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// S</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="3"><li><code>equals(Object obj)</code></li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">String str1 </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;Stardust&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String str2 </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;Stardust&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str1.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(str2)); </span><span style="color:#6A737D;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="4"><li><code>substring()</code></li></ol><p>用于提取子串，返回的是一个新的字符串。它有两个重载方法：</p><ul><li><code>substring(int beginIndex)</code>：从 <code>beginIndex</code> 开始到字符串末尾。</li><li><code>substring(int beginIndex, int endIndex)</code>：从 <code>beginIndex</code> 开始到 <code>endIndex</code> 结束，但不包括 <code>endIndex</code>。（左闭右开）</li></ul><ol start="5"><li><code>indexOf()</code></li></ol><p>返回指定字符或字符串在字符串中第一次出现的位置。</p><ol start="6"><li><code>lastIndexOf()</code></li></ol><p>返回指定字符或字符串在字符串中最后一次出现的位置。</p><ol start="7"><li><code>split()</code></li></ol><p>根据指定的分隔符，将字符串分割成多个子串。返回的是一个字符串数组。</p><ol start="8"><li><code>toUppercase()</code> 和 <code>toLowerCase()</code></li></ol><p>将字符串转换为大写或小写。</p><ol start="9"><li><code>trim()</code></li></ol><p>去除字符串两端的空格。</p><ol start="10"><li><code>replace()</code> 和 <code>replaceAll()</code></li></ol><p><code>replace()</code> 用于替换指定字符或者字符串，参数 1 是被替换的字符(串)，参数 2 是替换的字符(串)。</p><p>而 <code>replaceAll()</code> 使用正则表达式替换。</p><h2 id="字符串拼接-stringbuffer-和-stringbuilder" tabindex="-1">字符串拼接（StringBuffer 和 StringBuilder） <a class="header-anchor" href="#字符串拼接-stringbuffer-和-stringbuilder" aria-label="Permalink to &quot;字符串拼接（StringBuffer 和 StringBuilder）&quot;">​</a></h2><p>常用的字符串拼接方式有三种：</p><ol><li><code>+</code> 拼接</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">String str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;Stardust&quot;</span><span style="color:#D73A49;"> +</span><span style="color:#032F62;"> &quot; is &quot;</span><span style="color:#D73A49;"> +</span><span style="color:#032F62;"> &quot;beautiful&quot;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li><code>concat()</code> 方法</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">String str </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;Stardust&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; is &quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;beautiful&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li><code>StringBuffer</code> 和 <code>StringBuilder</code></li></ol><p>仅演示 <code>StringBuilder</code>，<code>StringBuffer</code> 用法类似。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">StringBuilder sb </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> StringBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Stardust&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; is &quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;beautiful&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sb.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这三种方式的性能和效率有所不同：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果在循环体内进行字符串拼接，最好使用 <code>StringBuilder</code> 的 <code>append()</code> 方法，而不是 <code>+</code> 号操作符。</p></div><ol><li><code>+</code> 拼接：每次拼接都会创建一个新的对象，效率较低。因为编译器会将 <code>+</code> 拼接转换为一个临时 <code>StringBuilder</code> 的 <code>append()</code> 方法。</li><li><code>concat()</code>：效率比 <code>+</code> 高，但实现方法是通过 <code>new String()</code> 创建新字符串对象，将两个字符串复制拼接。</li><li><code>StringBuilder</code>：是一个可变的字符序列，效率最高。<code>append()</code> 方法会在原有的 <code>char[]</code> 数组上进行拼接。<strong>线程不安全</strong>。和它类似的 <code>StringBuffer</code> 是线程安全的，但因为同步开销，效率较低。</li></ol>`,48),t=[o];function p(r,c,i,d,u,b){return e(),a("div",null,t)}const h=s(l,[["render",p]]);export{g as __pageData,h as default};
