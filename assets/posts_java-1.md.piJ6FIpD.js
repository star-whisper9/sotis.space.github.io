import{_ as s,c as n,a,y as l}from"./chunks/framework.76EObW2Q.js";const m=JSON.parse('{"title":"Java 学习入门 1","description":"","frontmatter":{"title":"Java 学习入门 1","date":"2024-09-12T00:00:00.000Z","tags":["Java","code"],"cover":"../cover-java.png"},"headers":[],"relativePath":"posts/java-1.md","filePath":"posts/java-1.md"}'),p={name:"posts/java-1.md"},e=l(`<h1 id="java-语法基础" tabindex="-1">Java 语法基础 <a class="header-anchor" href="#java-语法基础" aria-label="Permalink to &quot;Java 语法基础&quot;">​</a></h1><hr><nav class="table-of-contents"><ul><li><a href="#重点关键字">重点关键字</a><ul><li><a href="#abstract">abstract</a></li><li><a href="#enum">enum</a></li><li><a href="#extends">extends</a></li><li><a href="#final">final</a></li><li><a href="#implements">implements</a></li><li><a href="#interface">interface</a></li><li><a href="#native">native</a></li><li><a href="#private">private</a></li><li><a href="#protected">protected</a></li><li><a href="#public">public</a></li><li><a href="#static">static</a></li><li><a href="#strictfp">strictfp</a></li><li><a href="#super">super</a></li><li><a href="#synchronized">synchronized</a></li><li><a href="#throw-和-throws">throw 和 throws</a></li><li><a href="#transient">transient</a></li><li><a href="#volatile">volatile</a></li></ul></li></ul></nav><h2 id="重点关键字" tabindex="-1">重点关键字 <a class="header-anchor" href="#重点关键字" aria-label="Permalink to &quot;重点关键字&quot;">​</a></h2><h3 id="abstract" tabindex="-1"><code>abstract</code> <a class="header-anchor" href="#abstract" aria-label="Permalink to &quot;\`abstract\`&quot;">​</a></h3><p>用于声明抽象类或抽象方法。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> abstract</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 抽象类</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> abstract</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> eat</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 抽象方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Dog</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 实现类</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> eat</span><span style="color:#24292E;">() { </span><span style="color:#6A737D;">// 实现方法</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Dog is eating&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><hr><h3 id="enum" tabindex="-1"><code>enum</code> <a class="header-anchor" href="#enum" aria-label="Permalink to &quot;\`enum\`&quot;">​</a></h3><p>用于声明枚举类型。枚举类型里是一组固定的常量。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> enum</span><span style="color:#6F42C1;"> Color</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">    RED</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">GREEN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BLUE</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><h3 id="extends" tabindex="-1"><code>extends</code> <a class="header-anchor" href="#extends" aria-label="Permalink to &quot;\`extends\`&quot;">​</a></h3><p>用于指示一个类是从另一个类或接口继承的。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> eat</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;动物正在吃东西&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Dog</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> bark</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;狗在汪汪叫&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> ExtendsDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> static</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Dog dog </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Dog</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        dog.</span><span style="color:#6F42C1;">eat</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        dog.</span><span style="color:#6F42C1;">bark</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><hr><h3 id="final" tabindex="-1"><code>final</code> <a class="header-anchor" href="#final" aria-label="Permalink to &quot;\`final\`&quot;">​</a></h3><p>用于表示某个变量、方法或类是最终的，不能被修改或继承。</p><ol><li>final 变量：表示一个常量，一旦被赋值，其值就不能再被修改。这在声明不可变的值时非常有用。</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> final</span><span style="color:#D73A49;"> double</span><span style="color:#24292E;"> PI </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 3.14</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>final 方法：表示该方法不能被子类重写。</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    final</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> makeSound</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;动物发出声音.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Dog</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 错误: 无法覆盖来自 Animal 的 final 方法</span></span>
<span class="line"><span style="color:#6A737D;">    // void makeSound() {</span></span>
<span class="line"><span style="color:#6A737D;">    //     System.out.println(&quot;狗吠叫.&quot;);</span></span>
<span class="line"><span style="color:#6A737D;">    // }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Main</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> static</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Dog dog </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Dog</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        dog.</span><span style="color:#6F42C1;">makeSound</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ol start="3"><li>final 类表示一个不能被继承的类。</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">final</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    void</span><span style="color:#6F42C1;"> makeSound</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;动物发出声音.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 错误: 类型 Dog 无法继承 final 类 Animal</span></span>
<span class="line"><span style="color:#6A737D;">// class Dog extends Animal {</span></span>
<span class="line"><span style="color:#6A737D;">//     void makeSound() {</span></span>
<span class="line"><span style="color:#6A737D;">//         System.out.println(&quot;狗吠叫.&quot;);</span></span>
<span class="line"><span style="color:#6A737D;">//     }</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Main</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> static</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Animal animal </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        animal.</span><span style="color:#6F42C1;">makeSound</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><hr><h3 id="implements" tabindex="-1"><code>implements</code> <a class="header-anchor" href="#implements" aria-label="Permalink to &quot;\`implements\`&quot;">​</a></h3><p>用于实现接口。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 一个实现了 Runnable 接口的类</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyThread</span><span style="color:#D73A49;"> implements</span><span style="color:#6F42C1;"> Runnable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // 线程执行的代码</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><h3 id="interface" tabindex="-1"><code>interface</code> <a class="header-anchor" href="#interface" aria-label="Permalink to &quot;\`interface\`&quot;">​</a></h3><p>用于声明接口。</p><p>接口类中一般只有声明的方法，没有实现，他们都隐含了 <code>abstract</code> 和 <code>public</code> 修饰符。如果要添加有实现的方法，需要使用 <code>default</code> 关键字。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    void</span><span style="color:#6F42C1;"> eat</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 接口方法（抽象方法）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    default</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> makeSound</span><span style="color:#24292E;">() { </span><span style="color:#6A737D;">// 接口默认方法</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;动物发出声音.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h3 id="native" tabindex="-1"><code>native</code> <a class="header-anchor" href="#native" aria-label="Permalink to &quot;\`native\`&quot;">​</a></h3><p>用于声明一个方法是由非 Java 语言实现的。声明的方法在 Java 中声明但实现位于本地代码（通常是 C/C++ ），它通常用于与本地库或操作系统交互。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> native</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> nativeMethod</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><h3 id="private" tabindex="-1"><code>private</code> <a class="header-anchor" href="#private" aria-label="Permalink to &quot;\`private\`&quot;">​</a></h3><p>用于声明私有变量、方法或构造函数。表明其只对当前类可见。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> x; </span><span style="color:#6A737D;">// 私有属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#6A737D;">        // 私有方法</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h3 id="protected" tabindex="-1"><code>protected</code> <a class="header-anchor" href="#protected" aria-label="Permalink to &quot;\`protected\`&quot;">​</a></h3><p>表示方法或变量对同一包内的类和所有子类可见。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.mypackage;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyBaseClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    protected</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> x; </span><span style="color:#6A737D;">// 受保护的属性 x，可以被子类和同一包中的其他类访问</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    protected</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // 受保护的方法 foo，可以被子类和同一包中的其他类调用</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.mypackage;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MySubClass</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> MyBaseClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> bar</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        x </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 10</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 可以访问 MyBaseClass 中的受保护属性 x</span></span>
<span class="line"><span style="color:#6F42C1;">        foo</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 可以调用 MyBaseClass 中的受保护方法 foo</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><hr><h3 id="public" tabindex="-1"><code>public</code> <a class="header-anchor" href="#public" aria-label="Permalink to &quot;\`public\`&quot;">​</a></h3><p>用于声明公共变量、方法或构造函数。表明其对所有类可见。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> x; </span><span style="color:#6A737D;">// 公共属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#6A737D;">        // 公共方法</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h3 id="static" tabindex="-1"><code>static</code> <a class="header-anchor" href="#static" aria-label="Permalink to &quot;\`static\`&quot;">​</a></h3><p>用于声明静态变量、方法或代码块。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> static</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 5</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 静态变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> static</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // 静态方法</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">        // 静态代码块</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>静态变量 <code>x</code> ，静态方法 <code>foo</code> 和静态代码块在类加载时就会被初始化，不需要实例化对象。可以直接通过类名.变量名或类名.方法名调用。</p><hr><h3 id="strictfp" tabindex="-1"><code>strictfp</code> <a class="header-anchor" href="#strictfp" aria-label="Permalink to &quot;\`strictfp\`&quot;">​</a></h3><p>通常用于修饰一个方法，用于限制浮点数计算的精度和舍入行为。当你在类、接口或方法上使用 strictfp 时，该范围内的所有浮点数计算将遵循 IEEE 754 标准的规定，以确保跨平台的浮点数计算的一致性。</p><p>不同的硬件平台和 JVM 实现可能对浮点数计算的精度和舍入行为有差异，这可能导致在不同环境中运行相同的浮点数计算代码产生不同的结果。使用 strictfp 关键字可以确保在所有平台上获得相同的浮点数计算结果，避免计算结果的不一致问题。</p><p>但请注意，使用 strictfp 可能会对性能产生影响，因为可能需要更多的计算和转换来确保遵循 IEEE 754 标准。因此，在使用 strictfp 时，需要权衡精度和一致性与性能之间的关系。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> strictfp</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    strictfp</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // 严格浮点运算</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><h3 id="super" tabindex="-1"><code>super</code> <a class="header-anchor" href="#super" aria-label="Permalink to &quot;\`super\`&quot;">​</a></h3><p>用于调用父类的构造函数、属性和方法。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> eat</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;动物正在吃东西&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Dog</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> bark</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;狗在汪汪叫&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> eat</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">        super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">eat</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 调用父类的 eat 方法</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;狗正在吃东西&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><hr><h3 id="synchronized" tabindex="-1"><code>synchronized</code> <a class="header-anchor" href="#synchronized" aria-label="Permalink to &quot;\`synchronized\`&quot;">​</a></h3><p>用于声明同步方法或同步代码块。</p><p>(<strong>加锁</strong>)</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> count;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> synchronized</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> increment</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 同步方法</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> doSomething</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">        synchronized</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 同步代码块</span></span>
<span class="line"><span style="color:#6A737D;">            // 执行一些需要同步的操作</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><hr><h3 id="throw-和-throws" tabindex="-1"><code>throw</code> 和 <code>throws</code> <a class="header-anchor" href="#throw-和-throws" aria-label="Permalink to &quot;\`throw\` 和 \`throws\`&quot;">​</a></h3><ol><li><code>throw</code> 用于抛出一个异常对象。<strong>是主动抛出 xx 异常</strong></li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">        throw</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Exception</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;抛出一个异常&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li><code>throws</code> 用于声明一个方法可能抛出的异常。<strong>是声明这个方法可能会抛出 xx 异常</strong></li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> foo</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#6A737D;">        // 可能抛出异常的代码</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><h3 id="transient" tabindex="-1"><code>transient</code> <a class="header-anchor" href="#transient" aria-label="Permalink to &quot;\`transient\`&quot;">​</a></h3><p>用于声明一个变量不会被序列化。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyClass</span><span style="color:#D73A49;"> implements</span><span style="color:#6F42C1;"> Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#D73A49;"> transient</span><span style="color:#24292E;"> String password; </span><span style="color:#6A737D;">// 不会被序列化</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这个示例中，MyClass 类实现了 Serializable 接口，表示该类的对象可以被序列化。该类有三个成员变量，分别是 id、name 和 password。其中，password 成员变量被标记为 transient，表示在序列化过程中忽略这个成员变量。</p><hr><h3 id="volatile" tabindex="-1"><code>volatile</code> <a class="header-anchor" href="#volatile" aria-label="Permalink to &quot;\`volatile\`&quot;">​</a></h3><p>用于声明一个变量是易变的，即使在多线程环境下，该变量的值也不会被缓存。即一个线程修改了某个变量的值，新值对其他线程来说是立即可见的。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#D73A49;"> class</span><span style="color:#6F42C1;"> MyThread</span><span style="color:#D73A49;"> extends</span><span style="color:#6F42C1;"> Thread</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#D73A49;"> volatile</span><span style="color:#D73A49;"> boolean</span><span style="color:#24292E;"> running </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> true</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">        while</span><span style="color:#24292E;"> (running) {</span></span>
<span class="line"><span style="color:#6A737D;">            // 线程执行的代码</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">    public</span><span style="color:#D73A49;"> void</span><span style="color:#6F42C1;"> stopThread</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        running </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在这个示例中，MyThread 类继承了 Thread 类，其中声明了一个 volatile 类型的成员变量 running。在 run 方法中，通过 while 循环不断检查 running 的值，如果 running 为 true，则继续执行线程的代码；如果 running 为 false，则退出循环，线程终止。</p><hr>`,86),o=[e];function r(c,t,i,b,y,u){return a(),n("div",null,o)}const h=s(p,[["render",r]]);export{m as __pageData,h as default};
