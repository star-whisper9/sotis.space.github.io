import{_ as l,m as o,c as p,q as t,z as a,S as r,y as n,a as s,i as c,h as i}from"./chunks/framework.BmiwJf14.js";const A=JSON.parse('{"title":"Java 学习入门 8","description":"","frontmatter":{"title":"Java 学习入门 8","date":"2024-09-14T11:00:00.000Z","tags":["Java","code"],"cover":"../cover-java.png"},"headers":[],"relativePath":"posts/java-8.md","filePath":"posts/java-8.md"}'),d={name:"posts/java-8.md"},y=n('<h1 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h1><hr><nav class="table-of-contents"><ul><li><a href="#包装类">包装类</a><ul><li><a href="#基本数据类型包装类">基本数据类型包装类</a></li><li><a href="#特殊包装类">特殊包装类</a></li></ul></li></ul></nav><hr><h2 id="包装类" tabindex="-1">包装类 <a class="header-anchor" href="#包装类" aria-label="Permalink to &quot;包装类&quot;">​</a></h2><h3 id="基本数据类型包装类" tabindex="-1">基本数据类型包装类 <a class="header-anchor" href="#基本数据类型包装类" aria-label="Permalink to &quot;基本数据类型包装类&quot;">​</a></h3><p>Java 的基本数据类型是不具备对象特性的，为了能够将基本数据类型当作对象来使用，Java 提供了包装类。</p>',7),u=n(`<p>可以通过 <code>new</code> 来直接创建一个对应的对象，以 <code>Integer</code> 类为例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">Integer i </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Integer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>同时也可以使用自动装箱和拆箱的特性：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">Integer i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 100</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 自动装箱</span></span>
<span class="line"><span style="color:#24292E;">Integer o </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 等价于，手动装箱</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i; </span><span style="color:#6A737D;">// 自动拆箱</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i.</span><span style="color:#6F42C1;">intValue</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 等价于，手动拆箱</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>包装类对象的比较应该使用 <code>equals</code> 方法，而不是 <code>==</code> 运算符。 同时要注意基本数据类型缓存池的存在。详见<a href="./java-2.html#基本数据类型缓存池">基本数据类型缓存池</a></p></div><h3 id="特殊包装类" tabindex="-1">特殊包装类 <a class="header-anchor" href="#特殊包装类" aria-label="Permalink to &quot;特殊包装类&quot;">​</a></h3><h4 id="biginteger" tabindex="-1"><code>BigInteger</code> <a class="header-anchor" href="#biginteger" aria-label="Permalink to &quot;\`BigInteger\`&quot;">​</a></h4><p><code>BigInteger</code> 类是一个可以任意精度的整数，可以用来表示任意大小的整数。</p><p>它的底层实现是一个数组，每个元素都是一个 <code>int</code> 类型的值，每个元素都是 <code>2^32</code> 的倍数。进行算术运算时，会将数组中的每个元素进行运算，然后再将结果合并。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">BigInteger bigInteger </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> BigInteger</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456789012345678901234567890&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">bigInteger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bigInteger.</span><span style="color:#6F42C1;">multiply</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> BigInteger</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;3&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 能够正确得出结果</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="bigdecimal" tabindex="-1"><code>BigDecimal</code> <a class="header-anchor" href="#bigdecimal" aria-label="Permalink to &quot;\`BigDecimal\`&quot;">​</a></h4><p><code>BigDecimal</code> 类是一个可以任意精度的浮点数，可以用来表示任意大小的浮点数。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">BigDecimal i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BigDecimal.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i.</span><span style="color:#6F42C1;">divide</span><span style="color:#24292E;">(BigDecimal.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, RoundingMode.CEILING);</span></span>
<span class="line"><span style="color:#6A737D;">//计算10/3的结果，精确到小数点后100位</span></span>
<span class="line"><span style="color:#6A737D;">//RoundingMode是舍入模式，就是精确到最后一位时，该怎么处理，这里CEILING表示向上取整</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>但是注意，对于这种结果无限的小数，我们必须要限制长度，否则会出现异常。</p>`,14);function b(g,h,m,v,E,D){const e=o("Mermaid");return s(),p("div",null,[y,(s(),t(r,null,{default:a(()=>[c(e,{id:"mermaid-17",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5BObject%5D%20--%3E%20B%5BNumber%5D%0A%20%20%20%20A%20--%3E%20C%5BCharacter%5D%0A%20%20%20%20A%20--%3E%20D%5BBoolean%5D%0A%20%20%20%20B%20--%3E%20E%5BInteger%5D%0A%20%20%20%20B%20--%3E%20F%5BDouble%5D%0A%20%20%20%20B%20--%3E%20G%5BFloat%5D%0A%20%20%20%20B%20--%3E%20H%5BLong%5D%0A%20%20%20%20B%20--%3E%20I%5BShort%5D%0A"})]),fallback:a(()=>[i(" Loading... ")]),_:1})),u])}const C=l(d,[["render",b]]);export{A as __pageData,C as default};
