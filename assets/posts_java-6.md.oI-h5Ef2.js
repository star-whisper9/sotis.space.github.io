import{_ as s,c as a,a as n,y as l}from"./chunks/framework.BmiwJf14.js";const m=JSON.parse('{"title":"Java 学习入门 6","description":"","frontmatter":{"title":"Java 学习入门 6","date":"2024-09-13T09:00:00.000Z","tags":["Java","code"],"cover":"../cover-java.png"},"headers":[],"relativePath":"posts/java-6.md","filePath":"posts/java-6.md"}'),p={name:"posts/java-6.md"},e=l(`<h1 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h1><hr><nav class="table-of-contents"><ul><li><a href="#数组">数组</a><ul><li><a href="#数组声明">数组声明</a></li><li><a href="#数组的基本操作">数组的基本操作</a></li></ul></li></ul></nav><hr><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><p>数组是一种数据结构，用于存储相同类型的多个元素。数组的长度是<strong>固定的</strong>，不能动态增加或减少。</p><p>它存储的元素可以是基本数据类型，也可以是引用数据类型。</p><h3 id="数组声明" tabindex="-1">数组声明 <a class="header-anchor" href="#数组声明" aria-label="Permalink to &quot;数组声明&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr1; </span><span style="color:#6A737D;">// 声明一个整型数组</span></span>
<span class="line"><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] arr2; </span><span style="color:#6A737D;">// 声明一个字符串数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr3 </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// 声明时初始化数组长度为 5</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">}; </span><span style="color:#6A737D;">// 声明时初始化数组元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> arr3[]; </span><span style="color:#6A737D;">// 也可以这样声明，但不推荐</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>数组在初始化时必须指定长度。</p></div><h3 id="数组的基本操作" tabindex="-1">数组的基本操作 <a class="header-anchor" href="#数组的基本操作" aria-label="Permalink to &quot;数组的基本操作&quot;">​</a></h3><ol><li>通过下标访问和赋值元素</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#D73A49;"> int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">arr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">arr[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(arr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">arr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(arr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="2"><li>遍历数组</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 for 循环遍历数组</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(arr[i]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 while 循环类似</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>数组是一个可迭代的对象，可以使用 <code>for-each</code> 循环遍历数组。</p><blockquote><p>但数组本身并不支持迭代器，其没有实现 <code>Iterable</code> 接口。 <code>for-each</code> 循环是编译器的语法糖，在迭代数组时编译器会将其转换为普通的 <code>for</code> 循环。迭代实现了 <code>Iterable</code> 接口的对象时，才会使用迭代器。</p></blockquote><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> arr) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(num);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li>数组的属性和方法</li></ol><ul><li><code>length</code> 属性：获取数组的长度</li><li><code>clone()</code> 方法：复制一个数组</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>不要使用数组原生的 <code>equals()</code> 方法比较两个数组是否相等，数组并没有重写该方法，而是会调用 <code>Object.equals()</code>，其比较的是两个对象的地址是否相等。<strong>对数组的操作一般使用 <code>java.util.Arrays</code> 类。</strong></p></div>`,21),o=[e];function r(c,t,i,y,d,b){return n(),a("div",null,o)}const C=s(p,[["render",r]]);export{m as __pageData,C as default};
